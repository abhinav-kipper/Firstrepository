It is UNIX... 
git --version

---------Configuration------------
git config --global user.name "abhinavkipper"

git config --global user.email "mudgal.abhinav19@gmail.com"

git config --list

git config user.name

----help----
git help

git help commit


----Creating repository (means Project)-------

pwd
____/c/Users/Manoj
cd ~ 		Change to HOME

cd ..
____/c/Users

ls

cd Manoj/Desktop

cd gitwork

$ git init

___Initialized empty Git repository in C:/Users/Manoj/Desktop/gitwork/.git/

------Commit----------

ls -la

drwxr-xr-x 1 Manoj 197609   0 Aug 14 21:41 ./
drwxr-xr-x 1 Manoj 197609   0 Aug 14 21:36 ../
drwxr-xr-x 1 Manoj 197609   0 Aug 14 21:41 .git/
-rw-r--r-- 1 Manoj 197609 531 Aug 14 21:42 git_work.txt


Hidden files that manages git.

Let  git know we made changes to out project

---$ git add .
Add all changes that we made to our current repository. Its  just aware that changes took place.
But its a two step process
Next step is commit
commit is like snapshot.
commit to git --save this point in time

If ever got messed up later in time come back and redo it.

--$ git commit -m "This is our first commit"

After -m is just a message for identification.



--------Adding files and the Commit Log------


$ git log
It allows us to view our commit  history.

$ git log --author="abhinav"

Author: abhinavkipper <mudgal.abhinav19@gmail.com>
Date:   Mon Aug 14 21:51:30 2017 +0530

    This is our first commit


$ git status
On branch master.
nothing to commit,working directory clean


Added two files and again saw the status

On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   git_work.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        second.txt
        third.txt

no changes added to commit (use "git add" and/or "git commit -a")

---Remember it was a two step process
Add and commit.

$ git add second.txt
Added it to like a the staging  area

working copy -> staging area -> repository.


$ git commit -m "Second file added to repository" 

Commited secondfile (only) to repository.

git add third.txt
git commit -m "Third one joins now."


--------How to edit files---

git status

It tells I modified git_work.txt file

So,
git add git_work.txtt
git commit -m "updated git_work.txt"


--How to commit changes for more than one files


$ git status

git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   git_work.txt
        modified:   second.txt
        modified:   third.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git add .

git status

On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   git_work.txt
        modified:   second.txt
        modified:   third.txt



All files went to staging area

$ git commit -m "Multiple files."
Done.

--------Viewing  the changed that you made ----------------------

$ git status

On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   git_work.txt


--$ git diff


--------Comparing the staging are with the repository----

If we put  a file in staging  area 
git does not compare it with the repository one 
and git diff returns nothing even if it is modified.

$git diff --staged
It compares repository and staging area.


-----------Delete files-----------------

$ git rm third.txt

It deletes third.txt from git as well as our  pc.
 $ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        deleted:    third.txt

$ git commit -m "This is point in time where we deleted third.txt"

****Now see the magic is we can come back to this snapshot and get the file back.

-----Rename and Move--------------------

Renamed second.txt to secondrenamed.txt
git status

On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        deleted:    third.txt

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   git_work.txt
        deleted:    second.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        secondrenamed.txt


git add secondrenamed.txt
git rm second.txt

git status

Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        renamed:    second.txt -> secondrenamed.txt
        deleted:    third.txt


Now git knows that we actually renamed the file.

git commit -m "renamed"


---Other way to rename (move)

git mv  second.txt secondrenamed.txt
